{% extends 'base.html.twig' %}

{% block title %}Stock de Productos{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="{{ asset('styles/view_stock.css') }}" rel="stylesheet">
{% endblock %}

{% block body %}
    <div class="page-stock">
        <h1>Stock de Productos</h1>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}

        {% if products is defined and products|filter(p => p.needsRestock)|length > 0 %}
            <div class="stock-warning">
                <strong>¡Atención!</strong> Los siguientes productos están por debajo o igual a su stock mínimo:
                <ul>
                    {% for product in products|filter(p => p.needsRestock) %}
                        <li>{{ product.name }} (Cantidad: {{ product.quantity }}, Stock Mínimo: {{ product.minStock }})</li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        <div class="stock-container">
            <table class="stock-table">
                <thead>
                    <tr>
                        <th>Imagen</th>
                        <th>Nombre</th>
                        <th>Marca</th>
                        <th>Cantidad</th>
                        <th>Stock Mínimo</th>
                        <th>Precio</th>
                        <th>Descripción</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    {% if products is defined and products|length > 0 %}
                        {% for product in products %}
                            <tr data-id="{{ product.id }}" class="{{ product.needsRestock ? 'low-stock' : '' }}">
                                <td>
                                    {% if product.image %}
                                        <img src="data:image/jpeg;base64,{{ product.image }}" 
                                             alt="{{ product.name }}"
                                             class="product-image">
                                    {% endif %}
                                </td>
                                <td class="editable-cell" data-field="name">{{ product.name }}</td>
                                <td class="editable-cell" data-field="brand">{{ product.brand }}</td>
                                <td class="editable-cell {% if product.needsRestock %}bajo-stock{% endif %}" 
                                    data-field="quantity">{{ product.quantity }}</td>
                                <td class="editable-cell" data-field="minStock">{{ product.minStock }}</td>
                                <td class="editable-cell" data-field="price">${{ product.price }}</td>
                                <td class="editable-cell" data-field="description">{{ product.description }}</td>
                                <td>
                                    {% if not product.hasEnoughStock %}
                                        <span class="status-badge out-of-stock">Sin Stock</span>
                                    {% elseif product.needsRestock %}
                                        <span class="status-badge low-stock">Stock Bajo</span>
                                    {% else %}
                                        <span class="status-badge in-stock">En Stock</span>
                                    {% endif %}
                                </td>
                                <td class="actions">
                                    <button type="button" class="btn btn-secondary edit-btn" 
                                            onclick="toggleEditing(this.closest('tr'))">Editar</button>
                                    <button type="button" class="btn btn-primary save-btn" style="display:none;" 
                                            onclick="saveChanges(this.closest('tr'))">Guardar</button>
                                    <form method="post" action="{{ path('product_delete', {id: product.id}) }}" 
                                          onsubmit="return confirm('¿Estás seguro de que quieres eliminar este producto?');" 
                                          style="display:inline;">
                                        <input type="hidden" name="_method" value="DELETE">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ product.id) }}">
                                        <button class="btn btn-danger">Eliminar</button>
                                    </form>
                                    <input type="hidden" class="csrf-token" value="{{ csrf_token('edit' ~ product.id) }}">
                                </td>
                            </tr>
                        {% endfor %}
                    {% else %}
                        <tr>
                            <td colspan="9" class="no-products">No hay productos en stock</td>
                        </tr>
                    {% endif %}
                </tbody>
            </table>
        </div>

        {% if products is defined %}
            <div class="stock-summary">
                <h2>Resumen de Stock</h2>
                <div class="summary-cards">
                    <div class="summary-card total-products">
                        <h3>Total Productos</h3>
                        <p>{{ products|length }}</p>
                    </div>
                    <div class="summary-card low-stock">
                        <h3>Stock Bajo</h3>
                        <p>{{ products|filter(p => p.needsRestock)|length }}</p>
                    </div>
                    <div class="summary-card out-of-stock">
                        <h3>Sin Stock</h3>
                        <p>{{ products|filter(p => not p.hasEnoughStock)|length }}</p>
                    </div>
                </div>
            </div>
        {% endif %}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function toggleEditing(row) {
            const cells = row.querySelectorAll('.editable-cell');
            const editBtn = row.querySelector('.edit-btn');
            const saveBtn = row.querySelector('.save-btn');
            
            cells.forEach(cell => {
                const currentValue = cell.textContent.trim();
                const field = cell.dataset.field;
                
                if (!cell.classList.contains('editing')) {
                    const hasBajoStock = cell.classList.contains('bajo-stock');
                    
                    cell.classList.add('editing');
                    const input = document.createElement('input');
                    input.type = ['quantity', 'minStock'].includes(field) ? 'number' : 'text';
                    input.value = field === 'price' ? currentValue.replace('$', '') : currentValue;
                    input.name = field;
                    input.className = 'form-control editable';
                    cell.textContent = '';
                    cell.appendChild(input);
                    
                    if (hasBajoStock) {
                        cell.classList.add('bajo-stock');
                    }
                } else {
                    cell.classList.remove('editing');
                    const input = cell.querySelector('input');
                    cell.textContent = field === 'price' ? '$' + input.value : input.value;
                    
                    if (field === 'quantity') {
                        const quantity = parseInt(input.value);
                        const minStock = parseInt(row.querySelector('[data-field="minStock"]').textContent);
                        if (quantity <= minStock) {
                            cell.classList.add('bajo-stock');
                        } else {
                            cell.classList.remove('bajo-stock');
                        }
                    }
                }
            });

            editBtn.style.display = editBtn.style.display === 'none' ? '' : 'none';
            saveBtn.style.display = saveBtn.style.display === 'none' ? '' : 'none';
        }

        function saveChanges(row) {
            const id = row.dataset.id;
            const formData = new FormData();
            const csrfToken = row.querySelector('.csrf-token').value;
            const saveBtn = row.querySelector('.save-btn');
            
            saveBtn.classList.add('loading');
            
            row.querySelectorAll('.editable-cell input').forEach(input => {
                formData.append(input.name, input.value);
            });

            formData.append('_token', csrfToken);

            fetch('{{ path('product_edit', {'id': '__id__'}) }}'.replace('__id__', id), {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.message);
                    });
                }
                return response.json();
            })
            .then(data => {
                const messageClass = data.message === 'No se han detectado cambios' ? 'alert-warning' : 'alert-success';
                const successMessage = document.createElement('div');
                successMessage.className = `alert ${messageClass}`;
                successMessage.textContent = data.message;
                row.closest('.stock-container').insertBefore(successMessage, row.closest('table'));
                
                if (data.message === 'Cambios guardados correctamente') {
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    saveBtn.classList.remove('loading');
                    setTimeout(() => {
                        successMessage.remove();
                    }, 2000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                saveBtn.classList.remove('loading');
                
                const errorMessage = document.createElement('div');
                errorMessage.className = 'alert alert-danger';
                errorMessage.textContent = error.message;
                row.closest('.stock-container').insertBefore(errorMessage, row.closest('table'));
                
                setTimeout(() => {
                    errorMessage.remove();
                }, 2000);
            });
        }
    </script>
{% endblock %}