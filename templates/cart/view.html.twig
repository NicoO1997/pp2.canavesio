{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/cart.css') }}">
{% endblock %}

{% block title %}Carrito de Compras{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h2 class="mb-4">Carrito de compras</h2>

        {% if cart and cart.cartProductOrders|length > 0 %}
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Precio Unitario</th>
                        <th>Cantidad</th>
                        <th>Sub total</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    {% set total = 0 %}
                    {% for cartProductOrder in cart.cartProductOrders %}
                        {% set subtotal = cartProductOrder.product.price * cartProductOrder.quantity %}
                        {% set total = total + subtotal %}
                        <tr id="row-{{ cartProductOrder.id }}" {% if cartProductOrder.isFromReservation %}class="reserved-product"{% endif %}>
                            <td>
                                {{ cartProductOrder.product.name }}
                            </td>
                            <td>{{ cartProductOrder.product.price }} $</td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <input type="number" 
                                        class="form-control quantity-input me-2" 
                                        data-id="{{ cartProductOrder.id }}" 
                                        value="{{ cartProductOrder.quantity }}" 
                                        min="1"
                                        max="{{ cartProductOrder.product.quantity }}"
                                        data-max-quantity="{{ cartProductOrder.product.quantity }}"
                                        data-current-quantity="{{ cartProductOrder.quantity }}"
                                        data-is-reserved="{{ cartProductOrder.isFromReservation ? 'true' : 'false' }}"
                                        {% if cartProductOrder.isFromReservation %}disabled{% endif %}>
                                    <span class="stock-info" title="{% if cartProductOrder.isFromReservation %}Producto Reservado{% else %}Stock disponible{% endif %}">
                                        {% if not cartProductOrder.isFromReservation %}
                                            {% if not cartProductOrder.product.quantity > 0 %}
                                            <span style="color: red; font-weight: bold; text-transform: uppercase;">
                                                Stock: {{ cartProductOrder.product.quantity }}
                                            </span>
                                                {% else %}
                                                (Stock: {{ cartProductOrder.product.quantity }})
                                            {% endif %}
                                        {% else %}
                                            (Reservado)
                                        {% endif %}
                                    </span>
                                </div>
                            </td>
                            <td id="subtotal-{{ cartProductOrder.id }}">{{ subtotal }} $</td>
                            <td>
                                <form action="{{ path('cart_remove_product', { 'id': cartProductOrder.id }) }}" method="post" class="d-inline">
                                    <button type="submit" class="btn btn-danger">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </form>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>

            <div class="d-flex justify-content-between">
                <a href="{{ path('product_list') }}" class="btn btn-warning">
                    <i class="fa fa-arrow-left"></i>
                    Continuar comprando
                </a>
                <div>
                    <span class="me-3">Total: <strong id="cart-total">{{ total }} $</strong></span>
                    <a href="{{ path('create-preference') }}" class="btn btn-success">
                        Pagar <i class="fa fa-credit-card"></i>
                    </a>
                </div>
                {% if is_granted('ROLE_USUARIO') and cart.cartProductOrders|length > 0 %}
                    <a href="{{ path('purchase_cart_payment') }}" class="btn-accion btn-pago-simulado">
                        <i class="fas fa-credit-card"></i>
                        Pago Simulado
                    </a>
                {% endif %}
            </div>
        {% else %}
            <p class="text-center">Tu carrito está vacío.</p>
            <a href="{{ path('app_home_page') }}" class="btn btn-warning">
                <i class="fa fa-arrow-left"></i>
                Volver
            </a>
        {% endif %}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
document.addEventListener('DOMContentLoaded', function() {
    const quantityInputs = document.querySelectorAll('.quantity-input');

    quantityInputs.forEach(input => {
        const isReserved = input.getAttribute('data-is-reserved') === 'true';
        const maxQuantity = parseInt(input.getAttribute('data-max-quantity'));
        const currentQuantity = parseInt(input.getAttribute('data-current-quantity'));

        // Si el producto es de reserva, deshabilitar la edición completamente
        if (isReserved) {
            input.disabled = true;
            
            // Prevenir cualquier intento de modificación 
            input.addEventListener('input', function(e) {
                e.preventDefault();
                e.stopPropagation();
                this.value = currentQuantity;
                return false;
            });

            input.addEventListener('change', function(e) {
                e.preventDefault(); 
                e.stopPropagation();
                this.value = currentQuantity;
                return false;
            });

            input.addEventListener('keydown', function(e) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            });

            // También podemos añadir un estilo distintivo a la fila
            const row = document.getElementById('row-' + input.getAttribute('data-id'));
            if (row) {
                row.classList.add('reserved-product-row');
            }

            return; // Salir para productos reservados
        }

        // Para productos normales (no reservados)
        input.addEventListener('change', function() {
            const id = this.getAttribute('data-id');
            const quantity = parseInt(this.value);

            // Validar cantidad mínima
            if (quantity < 1) {
                this.value = 1;
                alert('La cantidad mínima es 1');
                return;
            }

            // Validar cantidad máxima
            if (quantity > maxQuantity) {
                this.value = maxQuantity;
                alert(`Solo hay ${maxQuantity} unidades disponibles en stock`);
                return;
            }

            const formData = new FormData();
            formData.append('id', id);
            formData.append('quantity', quantity);

            fetch('{{ path('cart_update_quantity') }}', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Actualizar subtotal
                    const subtotalElement = document.getElementById(`subtotal-${id}`);
                    if (subtotalElement) {
                        subtotalElement.textContent = `${data.subtotal} $`;
                    }

                    // Actualizar total
                    const totalElement = document.getElementById('cart-total');
                    if (totalElement) {
                        totalElement.textContent = `${data.total} $`;
                    }

                    // Actualizar el stock info
                    const row = this.closest('tr');
                    const stockInfo = row.querySelector('.stock-info');
                    if (stockInfo) {
                        stockInfo.textContent = `(Stock: ${data.availableStock})`;
                    }

                    // Actualizar los atributos del input
                    this.setAttribute('data-max-quantity', data.availableStock);
                    this.setAttribute('data-current-quantity', quantity);
                    this.max = data.availableStock;

                    // Mostrar mensaje de éxito
                    alert('Cantidad actualizada correctamente.');
                } else {
                    // Mostrar mensaje de error y revertir el cambio
                    alert(data.message);
                    this.value = this.getAttribute('data-current-quantity');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('La cantidad ingresada no se encuentra disponible.');
                this.value = this.getAttribute('data-current-quantity');
            });
        });

        // Validación en tiempo real para productos no reservados
        input.addEventListener('input', function() {
            if (isReserved) {
                this.value = currentQuantity;
                return;
            }
            
            const value = parseInt(this.value);
            if (value > maxQuantity) {
                this.value = maxQuantity;
            }
        });

        // Prevenir entrada de valores negativos
        input.addEventListener('keypress', function(e) {
            if (e.key === '-' || e.key === 'e' || e.key === '.') {
                e.preventDefault();
            }
        });

        // Asegurar que el valor nunca esté vacío
        input.addEventListener('blur', function() {
            if (!this.value || this.value < 1) {
                this.value = 1;
            }
        });
    });

    // Adicional: añadir estilos CSS para productos reservados
    const style = document.createElement('style');
    style.textContent = `
        .reserved-product {
            background-color: #f8f9fa;
        }
        .reserved-product-row {
            background-color: #f8f9fa; 
        }
        .reserved-product .stock-info {
            color: #6c757d;
            font-style: italic;
        }
        .reserved-product input:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
        }
    `;
    document.head.appendChild(style);
});
    </script>
{% endblock %}