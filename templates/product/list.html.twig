{% extends 'base.html.twig' %}

{% block stylesheets %}
	{{ parent() }}
	<link href="{{ asset('styles/listaproductos.css') }}" rel="stylesheet"/>
	<link href="https://fonts.googleapis.com/css2?family=Krub:wght@400;500;600;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
{% endblock %}

{% block title %}
	Nuestros Productos | Maquinaria Agrícola
{% endblock %}

{% block body %}
	<button class="volver-btn" onclick="location.href='{{ path('app_home_page') }}'">Volver</button>

	<div class="container-main">
		<section class="nuevas-maquinarias">
			<div class="title-container">
				<h2 class="productos-titulo">Nuevas Maquinarias</h2>
			</div>
			<div class="secciones-grid">
				{% for category in categories %}
					<a href="{{ path('used_machinery_section', { section: category.name }) }}" class="seccion-link">
						<div class="seccion">
							{% if category.image %}
								<img src="{{ asset('images/' ~ category.image) }}" alt="{{ category.name }}" class="seccion-imagen"/>
							{% else %}
								<img src="{{ asset('images/default-category.png') }}" alt="Imagen por defecto" class="seccion-imagen"/>
							{% endif %}
							<h3 class="image-text">{{ category.name }}</h3>
						</div>
					</a>
				{% endfor %}
			</div>
		</section>

		<section class="products-section">
			<div class="title-container">
				<h1 class="productos-titulo">Nuestros Productos</h1>
			</div>

			<div class="search-container">
				<input type="text" id="search-products" class="search-input" placeholder="Buscar repuestos..." autocomplete="off" value="{{ app.request.query.get('search') }}">
				<div class="loading-indicator"></div>
			</div>

			<div class="filtros-container">
				<h3 class="filtros-titulo">Filtrar Repuestos</h3>
				<form class="filtros-form" method="get" action="{{ path('product_list') }}">
					<div class="filtro-grupo">
						<label for="brand-select">Marca</label>
						<select name="brand" class="filtro-select" id="brand-select">
							<option value="">Seleccionar Marca</option>
						</select>
					</div>

					<div class="filtro-actions">
						<button type="submit" class="filtro-btn">Aplicar Filtros</button>
						<button type="button" class="limpiar-filtros" onclick="limpiarFiltros()">Limpiar Filtros</button>
					</div>
				</form>
			</div>

			{% if products is empty %}
				<div class="no-results">
					<h3>No se encontraron productos</h3>
					<p>Prueba con otros términos de búsqueda o limpia los filtros para ver todos los productos.</p>
				</div>
			{% else %}
				<div class="productos-grid">
					{% for product in products %}
						{% set i = loop.index %}
						<div class="producto-tarjeta" style="--i: {{ i }}">
							<a href="{{ path('product_detail', { id: product.id }) }}" class="producto-link">
								<div class="producto-imagen">
									{% if product.image %}
										<img src="{{ asset('imagenes/' ~ product.image) }}" alt="{{ product.name }}" class="product-image">
									{% else %}
										<img src="{{ asset('imagenes/no-image.png') }}" alt="No image available" class="product-image">
									{% endif %}
								</div>
								<div class="producto-info">
                                    {% if product.quantity is defined %}
                                        {% if product.quantity > 10 %}
											<span class="stock-badge stock-available">En stock</span>
										{% elseif product.quantity > 0 %}
											<span class="stock-badge stock-low">Últimas unidades</span>
										{% else %}
											<span class="stock-badge stock-out">Sin stock</span>
										{% endif %}
                                    {% endif %}
                                    
                                    <h2>{{ product.name }}</h2>
                                    
									{% if is_granted('ROLE_USUARIO') or is_granted('ROLE_VENDEDOR') or is_granted('ROLE_ADMIN') %}
										<p>${{ product.price }}</p>
									{% endif %}
								</div>
							</a>
						</div>
					{% endfor %}
				</div>
			{% endif %}
		</section>
	</div>

	<div class="imagen-fondo imagen--maquina1"></div>
	<div class="imagen-fondo imagen--maquina2"></div>
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
	<script>
		let brandsList = Array.from(new Set({{ sparePartsBrands|json_encode|raw }}));
		try {
			const savedBrands = localStorage.getItem('customBrands');
			if (savedBrands) {
				const parsedBrands = JSON.parse(savedBrands);
				parsedBrands.forEach(brand => {
					if (!brandsList.includes(brand)) {
						brandsList.push(brand);
					}
				});
			}
		} catch (e) {
			console.error('Error loading saved brands:', e);
		}
		brandsList.sort();
		
		function updateBrands() {
			const brandSelect = document.getElementById('brand-select');
			const currentBrand = '{{ app.request.query.get('brand') }}';
			
			brandSelect.innerHTML = '<option value="">Seleccionar Marca</option>';
			
			brandsList.sort().forEach(brand => {
				if (brand) {
					const option = document.createElement('option');
					option.value = brand;
					option.textContent = brand;
					if (brand === currentBrand) {
						option.selected = true;
					}
					brandSelect.appendChild(option);
				}
			});
		}
		
		function limpiarFiltros() {
			document.getElementById('brand-select').value = '';
			document.getElementById('search-products').value = '';
			window.location.href = '{{ path('product_list') }}';
		}
		
		function aplicarFiltros(searchTerm = '', brand = '') {
			let url = new URL(window.location.href);
			
			// Aplicar filtro de búsqueda si existe
			if (searchTerm) {
				// Usar 'search' en lugar de 'term' para mantener consistencia con el backend
				url.searchParams.set('search', searchTerm);
			} else {
				url.searchParams.delete('search');
			}
			
			// Aplicar filtro de marca si existe
			if (brand) {
				url.searchParams.set('brand', brand);
			} else {
				url.searchParams.delete('brand');
			}
			
			window.location.href = url.toString();
		}
		
		// Event Listeners
		document.addEventListener('DOMContentLoaded', () => {
			updateBrands();
			
			const searchInput = document.getElementById('search-products');
			const brandSelect = document.getElementById('brand-select');
			const searchContainer = document.querySelector('.search-container');
			
			// Obtener valores iniciales de la URL
			const urlParams = new URLSearchParams(window.location.search);
			const initialSearch = urlParams.get('search') || '';
			const initialBrand = urlParams.get('brand') || '';
			
			// Establecer valores iniciales en los campos
			searchInput.value = initialSearch;
			if (initialBrand) {
				brandSelect.value = initialBrand;
			}
			
			// Manejar el envío del formulario de filtros
			document.querySelector('.filtros-form').addEventListener('submit', function(e) {
				e.preventDefault();
				
				// Obtener el valor actual del input de búsqueda
				const searchTerm = searchInput.value.trim();
				const selectedBrand = brandSelect.value;
				
				// Aplicar ambos filtros
				aplicarFiltros(searchTerm, selectedBrand);
			});
		});
		
		$(document).ready(function() {
			const $searchInput = $('#search-products');
			const $brandSelect = $('#brand-select');
			const $searchContainer = $('.search-container');
			
			$searchInput.autocomplete({
				source: function(request, response) {
					const selectedBrand = $brandSelect.val();
					$searchContainer.addClass('search-active');
					
					$.ajax({
						url: '{{ path('search_products') }}',
						dataType: 'json',
						data: {
							search: request.term,
							brand: selectedBrand
						},
						success: function(data) {
							$searchContainer.removeClass('search-active');
							
							if (!data.success) {
								response([{
									label: 'Error en la búsqueda',
									value: '',
									noResults: true
								}]);
								return;
							}
							
							const results = data.results;
							
							if (results.length === 0) {
								response([{
									label: 'No se encontraron productos',
									value: '',
									noResults: true
								}]);
							} else if (results.length === 1) {
								// Solo si no hay filtro de marca aplicado
								if (!selectedBrand) {
									window.location.href = '{{ path('product_detail', {'id': 'PRODUCT_ID'}) }}'.replace('PRODUCT_ID', results[0].id);
								} else {
									response([{
										label: results[0].name,
										value: results[0].name,
										id: results[0].id,
										description: results[0].description,
										brand: results[0].brand,
										partNumber: results[0].partNumber,
										image: results[0].image
									}]);
								}
							} else {
								const mappedResults = results.map(item => ({
									label: item.name,
									value: item.name,
									id: item.id,
									description: item.description,
									brand: item.brand,
									partNumber: item.partNumber,
									image: item.image
								}));
								
								// Si hay una marca seleccionada, filtrar los resultados
								if (selectedBrand) {
									const filteredResults = mappedResults.filter(item => 
										item.brand.toLowerCase() === selectedBrand.toLowerCase()
									);
									response(filteredResults.length > 0 ? filteredResults : [{
										label: 'No se encontraron productos de esta marca',
										value: '',
										noResults: true
									}]);
								} else {
									response(mappedResults);
								}
							}
						},
						error: function(jqXHR, textStatus, errorThrown) {
							$searchContainer.removeClass('search-active');
							console.error('Error en la búsqueda:', textStatus, errorThrown);
							response([{
								label: 'Error en la búsqueda',
								value: '',
								noResults: true
							}]);
						}
					});
				},
				minLength: 2,
				select: function(event, ui) {
					if (!ui.item.noResults) {
						// Al seleccionar un item, establecer el término de búsqueda
						$searchInput.val(ui.item.value);
						// Si hay múltiples resultados y una marca seleccionada, aplicar los filtros
						const selectedBrand = $brandSelect.val();
						if (selectedBrand) {
							aplicarFiltros(ui.item.value, selectedBrand);
							return false;
						}
						// Si no hay marca seleccionada, ir al detalle del producto
						window.location.href = '{{ path('product_detail', {'id': 'PRODUCT_ID'}) }}'.replace('PRODUCT_ID', ui.item.id);
					}
					return false;
				},
				focus: function(event, ui) {
					return false;
				}
			}).data('ui-autocomplete')._renderItem = function(ul, item) {
				if (item.noResults) {
					return $('<li>')
						.append($('<div class="ui-menu-item-wrapper">').text(item.label))
						.appendTo(ul);
				}
				
				const searchTerm = $.trim(this.term).toLowerCase();
				const name = item.label;
				const highlightedName = name.replace(
					new RegExp(searchTerm, 'gi'),
					match => `<span class="highlight">${match}</span>`
				);
				
				const $li = $('<li>').addClass('ui-menu-item-wrapper');
				const $content = $('<div>')
					.append($('<strong>').html(highlightedName));
				
				if (item.partNumber) {
					$content.append(`<br><small>Número de parte: ${item.partNumber}</small>`);
				}
				if (item.brand) {
					$content.append(`<br><small>Marca: ${item.brand}</small>`);
				}
				if (item.description) {
					$content.append(`<br><small>${item.description.substring(0, 100)}...</small>`);
				}
				
				if (item.image) {
					const $img = $('<img>')
						.attr('src', "{{ asset('imagenes/') }}" + item.image)
						.addClass('search-result-thumbnail')
						.css({
							'max-width': '50px',
							'max-height': '50px',
							'margin-right': '10px'
						});

					$content.prepend($img);
				}
				
				$li.append($content);
				return $li.appendTo(ul);
			};
			
			// Actualizar la búsqueda cuando cambie el filtro de marca
			$brandSelect.on('change', function() {
				const searchTerm = $searchInput.val();
				if (searchTerm.length >= 2) {
					$searchInput.autocomplete('search', searchTerm);
				}
			});
		});
	</script>
{% endblock %}