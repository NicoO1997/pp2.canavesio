{% extends 'base.html.twig' %}

{% block title %}
Agregar Maquinaria
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href="{{ asset('styles/add_machinery.css') }}" rel="stylesheet" />
{% endblock %}

{% block body %}
<div class="form-container">
    <h1>Agregar Maquinaria</h1>
    
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">
            {{ message }}
        </div>
    {% endfor %}

    {{ form_start(form) }}
    <div class="form-group-container">
        <div class="form-group machinery-type-selector">
            <h3>Tipo de Maquinaria</h3>
            {{ form_widget(form.isNew) }}
            {{ form_errors(form.isNew, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.category) }}
            {{ form_widget(form.category) }}
            {{ form_errors(form.category, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.machineryName) }}
            {{ form_widget(form.machineryName) }}
            {{ form_errors(form.machineryName, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.brand) }}
            {{ form_widget(form.brand) }}
            {{ form_errors(form.brand, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.price) }}
            {{ form_widget(form.price) }}
            {{ form_errors(form.price, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group imagen-input">
            {{ form_label(form.imageFilename) }}
            {{ form_widget(form.imageFilename) }}
            {{ form_errors(form.imageFilename, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="used-fields-container">
            <h3 class="full-width">Detalles de Maquinaria Usada</h3>
            
            <div class="form-group">
                {{ form_label(form.yearsOld) }}
                {{ form_widget(form.yearsOld) }}
                {{ form_errors(form.yearsOld, {'attr': {'class': 'form-error'}}) }}
            </div>

            <div class="form-group">
                {{ form_label(form.months) }}
                {{ form_widget(form.months) }}
                {{ form_errors(form.months, {'attr': {'class': 'form-error'}}) }}
            </div>

            <div class="form-group">
                {{ form_label(form.hoursOfUse) }}
                {{ form_widget(form.hoursOfUse) }}
                {{ form_errors(form.hoursOfUse, {'attr': {'class': 'form-error'}}) }}
            </div>

            <div class="form-group">
                {{ form_label(form.lastService) }}
                {{ form_widget(form.lastService) }}
                {{ form_errors(form.lastService, {'attr': {'class': 'form-error'}}) }}
            </div>
        </div>

        <div class="form-group full-width">
            <div class="buttons-container">
                <button type="submit" class="btn btn-primary">Agregar</button>
                <a href="{{ path('app_home_page') }}" class="btn btn-secondary">Volver</a>
            </div>
        </div>
    </div>
    {{ form_end(form) }}
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const isNewRadios = document.querySelectorAll('input[name="used_machinery[isNew]"]');
    const usedFieldsContainer = document.querySelector('.used-fields-container');
    
    function toggleFields() {
        const selectedRadio = document.querySelector('input[name="used_machinery[isNew]"]:checked');
        if (selectedRadio) {
            const isNew = selectedRadio.value === '1';
            
            if (isNew) {
                usedFieldsContainer.style.display = 'none';
                usedFieldsContainer.style.opacity = '0';
            } else {
                usedFieldsContainer.style.display = 'grid';
                setTimeout(() => {
                    usedFieldsContainer.style.opacity = '1';
                }, 10);
            }
            
            const usedFields = usedFieldsContainer.querySelectorAll('input, select');
            
            usedFields.forEach(field => {
                if (isNew) {
                    field.removeAttribute('required');
                    
                    if (field.id.includes('yearsOld') || 
                        field.id.includes('months') || 
                        field.id.includes('hoursOfUse')) {
                        field.value = '0';
                    }
                    
                    if (field.id.includes('lastService')) {
                        field.value = new Date().toISOString().split('T')[0];
                    }
                } else {
                    if (field.hasAttribute('data-required')) {
                        field.setAttribute('required', 'required');
                    }
                }
            });
        }
    }
    
    const usedFields = usedFieldsContainer.querySelectorAll('input, select');
    usedFields.forEach(field => {
        if (field.hasAttribute('required')) {
            field.setAttribute('data-required', 'true');
        }
    });
    
    isNewRadios.forEach(radio => {
        radio.addEventListener('change', toggleFields);
    });
    
    toggleFields();
    
    const fileInput = document.querySelector('input[type="file"]');
    if (fileInput) {
        fileInput.addEventListener('change', function() {
            const fileName = this.value.split('\\').pop();
            if (fileName) {
                const parent = this.parentElement;
                if (parent.querySelector('.file-name')) {
                    parent.querySelector('.file-name').textContent = fileName;
                } else {
                    const fileNameSpan = document.createElement('span');
                    fileNameSpan.className = 'file-name';
                    fileNameSpan.style.fontSize = '0.8rem';
                    fileNameSpan.style.marginTop = '0.3rem';
                    fileNameSpan.textContent = fileName;
                    parent.appendChild(fileNameSpan);
                }
            }
        });
    }
});
</script>
{% endblock %}