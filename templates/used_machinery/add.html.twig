{% extends 'base.html.twig' %}

{% block title %}
Agregar Maquinaria
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href="{{ asset('styles/add_machinery.css') }}" rel="stylesheet" />
{% endblock %}

{% block body %}
<div class="form-container">
    <h1>Agregar Maquinaria</h1>
    
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">
            {{ message }}
        </div>
    {% endfor %}

    {{ form_start(form) }}
    <div class="form-group-container">
        <div class="form-group machinery-type-selector">
            <h3>Tipo de Maquinaria</h3>
            {{ form_widget(form.isNew) }}
            {{ form_errors(form.isNew, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.category) }}
            {{ form_widget(form.category) }}
            {{ form_errors(form.category, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.model) }}
            {{ form_widget(form.model) }}
            {{ form_errors(form.model, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.brand) }}
            {{ form_widget(form.brand) }}
            {{ form_errors(form.brand, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.fuelTankCapacity) }}
            {{ form_widget(form.fuelTankCapacity) }}
            {{ form_errors(form.fuelTankCapacity, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.technology) }}
            {{ form_widget(form.technology) }}
            {{ form_errors(form.technology, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.transmissionSystem) }}
            {{ form_widget(form.transmissionSystem) }}
            {{ form_errors(form.transmissionSystem, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group">
            {{ form_label(form.location) }}
            {{ form_widget(form.location) }}
            {{ form_errors(form.location, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group price-field">
            {{ form_label(form.price) }}
            {{ form_widget(form.price) }}
            {{ form_errors(form.price, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group taxpayer-type-field">
            {{ form_label(form.taxpayerType) }}
            {{ form_widget(form.taxpayerType) }}
            {{ form_errors(form.taxpayerType, {'attr': {'class': 'form-error'}}) }}
            <div id="pricePreview" class="price-preview" style="display: none;">
                <p>Precio Base: <span id="basePrice">$0.00</span></p>
                <p>IVA: <span id="ivaAmount">$0.00</span></p>
                <p>Precio Final: <span id="finalPrice">$0.00</span></p>
            </div>
        </div>

        <div class="form-group load-capacity-field">
            {{ form_label(form.loadCapacity) }}
            {{ form_widget(form.loadCapacity) }}
            {{ form_errors(form.loadCapacity, {'attr': {'class': 'form-error'}}) }}
        </div>

        <div class="form-group imagen-input">
            {{ form_label(form.imageFilenames) }}
            {{ form_widget(form.imageFilenames) }}
            {{ form_errors(form.imageFilenames, {'attr': {'class': 'form-error'}}) }}
            <small class="form-text text-muted">Puedes seleccionar hasta 5 im√°genes</small>
        </div>

        <div class="used-fields-container">
            <h3 class="full-width">Detalles de Maquinaria Usada</h3>
            
            <div class="form-group">
                {{ form_label(form.manufacturingDate) }}
                {{ form_widget(form.manufacturingDate) }}
                {{ form_errors(form.manufacturingDate, {'attr': {'class': 'form-error'}}) }}
            </div>

            <div class="form-group">
                {{ form_label(form.hoursOfUse) }}
                {{ form_widget(form.hoursOfUse) }}
                {{ form_errors(form.hoursOfUse, {'attr': {'class': 'form-error'}}) }}
            </div>

            <div class="form-group">
                {{ form_label(form.lastService) }}
                {{ form_widget(form.lastService) }}
                {{ form_errors(form.lastService, {'attr': {'class': 'form-error'}}) }}
            </div>
        </div>

        <div class="form-group full-width">
            <div class="buttons-container">
                <button type="submit" class="btn btn-primary">Agregar</button>
                <a href="{{ path('app_view_used_machinery') }}" class="btn btn-secondary">Volver</a>
            </div>
        </div>
    </div>
    {{ form_end(form) }}
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const isNewRadios = document.querySelectorAll('input[name="used_machinery[isNew]"]');
    const usedFieldsContainer = document.querySelector('.used-fields-container');
    const priceField = document.querySelector('.price-field');
    const categorySelect = document.querySelector('select[name="used_machinery[category]"]');
    const loadCapacityField = document.querySelector('.load-capacity-field');
    const taxpayerSelect = document.querySelector('select[name="used_machinery[taxpayerType]"]');
    const priceInput = document.querySelector('input[name="used_machinery[price]"]');
    const pricePreview = document.getElementById('pricePreview');
    const basePriceSpan = document.getElementById('basePrice');
    const ivaAmountSpan = document.getElementById('ivaAmount');
    const finalPriceSpan = document.getElementById('finalPrice');

    function calculatePrices() {
        if (priceInput.value) {
            const basePrice = parseFloat(priceInput.value);
            let ivaRate;
            let ivaText;
            
            switch(taxpayerSelect.value) {
                case 'responsable_inscripto':
                    ivaRate = 0.21;
                    ivaText = '21%';
                    break;
                case 'consumidor_final':
                    ivaRate = 0.10;
                    ivaText = '10%';
                    break;
                case 'monotributista':
                case 'exento':
                    ivaRate = 0;
                    ivaText = '0%';
                    break;
                default:
                    ivaRate = 0;
                    ivaText = '0%';
            }

            const ivaAmount = basePrice * ivaRate;
            const finalPrice = basePrice + ivaAmount;

            pricePreview.style.display = 'block';
            basePriceSpan.textContent = `$${basePrice.toLocaleString('es-AR', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
            ivaAmountSpan.textContent = `$${ivaAmount.toLocaleString('es-AR', {minimumFractionDigits: 2, maximumFractionDigits: 2})} (${ivaText})`;
            finalPriceSpan.textContent = `$${finalPrice.toLocaleString('es-AR', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
        } else {
            pricePreview.style.display = 'none';
        }
    }

    function toggleLoadCapacityField() {
        const category = categorySelect.value;
        if (['sembradora', 'pulverizadora', 'tolva'].includes(category)) {
            loadCapacityField.style.display = 'block';
            if (!document.querySelector('input[name="used_machinery[isNew]"]:checked').value === '1') {
                loadCapacityField.querySelector('input').setAttribute('required', 'required');
            }
        } else {
            loadCapacityField.style.display = 'none';
            loadCapacityField.querySelector('input').removeAttribute('required');
            loadCapacityField.querySelector('input').value = '';
        }
    }

    function toggleFields() {
        const selectedRadio = document.querySelector('input[name="used_machinery[isNew]"]:checked');
        if (selectedRadio) {
            const isNew = selectedRadio.value === '1';
            
            if (isNew) {
                usedFieldsContainer.style.display = 'none';
                usedFieldsContainer.style.opacity = '0';
            } else {
                usedFieldsContainer.style.display = 'grid';
                setTimeout(() => {
                    usedFieldsContainer.style.opacity = '1';
                }, 10);
            }
            
            const usedFields = usedFieldsContainer.querySelectorAll('input, select');
            
            usedFields.forEach(field => {
                if (isNew) {
                    field.removeAttribute('required');
                    if (field.type === 'datetime-local' || field.type === 'date') {
                        field.value = '';
                    } else if (field.type === 'number') {
                        field.value = '';
                    }
                } else {
                    if (field.hasAttribute('data-required')) {
                        field.setAttribute('required', 'required');
                    }
                }
            });
        }
        toggleLoadCapacityField();
    }

    const usedFields = usedFieldsContainer.querySelectorAll('input, select');
    usedFields.forEach(field => {
        if (field.hasAttribute('required')) {
            field.setAttribute('data-required', 'true');
        }
    });

    isNewRadios.forEach(radio => {
        radio.addEventListener('change', toggleFields);
    });
    
    categorySelect.addEventListener('change', toggleLoadCapacityField);
    taxpayerSelect.addEventListener('change', calculatePrices);
    priceInput.addEventListener('input', calculatePrices);

    const fileInput = document.querySelector('input[type="file"]');
    if (fileInput) {
        fileInput.addEventListener('change', function() {
            const files = Array.from(this.files);
            const parent = this.parentElement;
            const existingFileList = parent.querySelector('.file-list');
            
            if (existingFileList) {
                parent.removeChild(existingFileList);
            }
            
            if (files.length > 0) {
                const fileList = document.createElement('div');
                fileList.className = 'file-list';
                fileList.style.marginTop = '0.5rem';
                fileList.style.fontSize = '0.8rem';
                
                files.forEach(file => {
                    const fileItem = document.createElement('div');
                    fileItem.textContent = file.name;
                    fileList.appendChild(fileItem);
                });
                
                parent.appendChild(fileList);
            }
        });
    }

    toggleFields();
    toggleLoadCapacityField();
    calculatePrices();
});
</script>
{% endblock %}